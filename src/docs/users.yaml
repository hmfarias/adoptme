paths:
  /api/users:
    get:
      tags:
        - Users
      summary: Get all users
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Success
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users/{uid}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          description: The ID of the user to retrieve
          schema:
            type: string
            example: '684ae0d443986cebb325e0b6'
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User retrieved
                  payload:
                    $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Users
      summary: Update a user by ID
      parameters:
        - in: path
          name: uid
          required: true
          description: The ID of the user to update
          schema:
            type: string
            example: '684ae0d443986cebb325e0b6'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User updated
                  payload:
                    $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/CouldNotBeUpdated'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Users
      summary: Delete a user by ID
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: The ID of the user to delete
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User deleted
                  payload:
                    $ref: '#/components/schemas/User'
        '422':
          $ref: '#/components/responses/CouldNotBeDeleted'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: 660a1234e1abc1234567de89
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        pets:
          type: array
          description: |
            Array of pet references. On user creation, it starts as an empty array.
            After adopting pets, it may contain full Pet objects (populated).
          minItems: 0
          items:
            $ref: '#/components/schemas/Pet'
        role:
          type: string
          example: user

    UserUnprotected:
      type: object
      properties:
        _id:
          type: string
          example: 660a1234e1abc1234567de89
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        password:
          type: string
          example: $2b$10$lcLkzG2yD5t/9riN.s2g.eSme37gEeeVr0NbKfh/hRdiN97kr1iNm
        pets:
          type: array
          description: |
            Array of pet references. On user creation, it starts as an empty array.
            After adopting pets, it may contain full Pet objects (populated).
          minItems: 0
          items:
            $ref: '#/components/schemas/Pet'
        role:
          type: string
          example: user

    UserInput:
      type: object
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
